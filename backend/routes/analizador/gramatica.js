/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,8],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,18,19,24,47,48,49,50,51],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[19,21],$Vd=[1,43],$Ve=[1,36],$Vf=[1,34],$Vg=[1,35],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[5,18,19,24,26,36,37,38,41,43,44,47,48,49,50,51],$Vo=[1,59],$Vp=[1,61],$Vq=[1,74],$Vr=[1,58],$Vs=[1,60],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,78],$VG=[21,22,28,34,35,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65],$VH=[1,84],$VI=[21,28],$VJ=[1,125],$VK=[1,124],$VL=[1,127],$VM=[1,128],$VN=[1,126],$VO=[1,129],$VP=[1,130],$VQ=[21,22,28,34,35,45,46,52,53,58,59,60,61,62,63,64,65],$VR=[21,22,28,34,35,45,46,52,53,54,55,57,58,59,60,61,62,63,64,65],$VS=[21,22,28,45,46,58,59,60,61,62,63,64,65],$VT=[19,26,36,37,38,41,43,44,47,48,49,50,51],$VU=[21,22,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"MAIN":6,"METODO":7,"DECLARACION":8,"ASIGNACION":9,"CUERPO2":10,"LLAMADA":11,"IMPRIMIR":12,"SI":13,"WHILEE":14,"DOWHILEE":15,"BREAKK":16,"CONTINUEE":17,"exec":18,"identificador":19,"parentesisa":20,"parentesisc":21,"pcoma":22,"VALORESLLAMADA":23,"vacio":24,"llavea":25,"llavec":26,"PARAMETROS":27,"coma":28,"TIPO":29,"EXP":30,"CASTEO":31,"TERNARIO":32,"igual":33,"incremento":34,"decremento":35,"imprimir":36,"mientras":37,"do":38,"FOR":39,"for":40,"si":41,"sino":42,"breakk":43,"continuee":44,"signointerrogacion":45,"dospuntos":46,"entero":47,"decimal":48,"caracter":49,"cadena":50,"bandera":51,"mas":52,"menos":53,"por":54,"dividido":55,"potencia":56,"modulo":57,"menor":58,"mayor":59,"menorigual":60,"mayorigual":61,"igualigual":62,"noigual":63,"or":64,"and":65,"not":66,"enteroo":67,"decimall":68,"caracterr":69,"cadenaa":70,"truee":71,"falsee":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"exec",19:"identificador",20:"parentesisa",21:"parentesisc",22:"pcoma",24:"vacio",25:"llavea",26:"llavec",28:"coma",33:"igual",34:"incremento",35:"decremento",36:"imprimir",37:"mientras",38:"do",40:"for",41:"si",42:"sino",43:"breakk",44:"continuee",45:"signointerrogacion",46:"dospuntos",47:"entero",48:"decimal",49:"caracter",50:"cadena",51:"bandera",52:"mas",53:"menos",54:"por",55:"dividido",56:"potencia",57:"modulo",58:"menor",59:"mayor",60:"menorigual",61:"mayorigual",62:"igualigual",63:"noigual",64:"or",65:"and",66:"not",67:"enteroo",68:"decimall",69:"caracterr",70:"cadenaa",71:"truee",72:"falsee"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[6,5],[6,6],[7,7],[7,8],[27,4],[27,2],[11,5],[11,4],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[8,5],[8,3],[8,5],[8,5],[9,4],[9,4],[9,4],[9,3],[9,3],[12,5],[12,4],[12,5],[12,5],[14,7],[14,7],[14,7],[15,9],[15,9],[15,9],[39,11],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[16,2],[17,2],[31,4],[32,5],[32,5],[32,5],[32,5],[29,1],[29,1],[29,1],[29,1],[29,1],[30,3],[30,2],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log('Funciono'); return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 6: case 7: case 9:
 this.$=[$$[$0]]; 
break;
case 8: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27:
 this.$ = [$$[$0]]; 
break;
case 28:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 29:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 30:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-5], [], $$[$0-1]) 
break;
case 31:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 32:
 $$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3];
break;
case 33:
 this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1], $$[$0])]; 
break;
case 34:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 35:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 36: case 37: case 38:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 39: case 40: case 41:
this.$=[$$[$0]];
break;
case 42: case 44: case 45:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 43:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-2], $$[$0-1], undefined); 
break;
case 46: case 47: case 48:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-3], $$[$0-1]); 
break;
case 49:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.INCREMENTO); 
break;
case 50:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.DECREMENTO); 
break;
case 51: case 53: case 54:
 this.$=INSTRUCCIONES.nuevoImprimir($$[$0-2]); 
break;
case 52:
 this.$=INSTRUCCIONES.nuevoImprimir("\n"); 
break;
case 55: case 56: case 57:
 this.$=INSTRUCCIONES.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 58: case 59: case 60:
 this.$=INSTRUCCIONES.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 61:
 this.$=INSTRUCCIONES.nuevoFor($$[$0-8], $$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 62: case 65: case 68:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 63: case 66: case 69:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-4], $$[$0-1], undefined); 
break;
case 64: case 67: case 70:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-6], $$[$0-3], [$$[$0]]); 
break;
case 71:
 this.$ = INSTRUCCIONES.nuevoBreak(); 
break;
case 72:
 this.$ = INSTRUCCIONES.nuevoContinue(); 
break;
case 73:
 this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.CASTEO, INSTRUCCIONES.nuevoValor($$[$0-2],0), $$[$0]); 
break;
case 74: case 75: case 76: case 77:
 this.$ = INSTRUCCIONES.nuevoTernario(TIPO_OPERACION.TERNARIO, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 78:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 79:
 this.$ = TIPO_DATO.DECIMAL; 
break;
case 80:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 81:
 this.$ = TIPO_DATO.CADENA; 
break;
case 82:
 this.$ = TIPO_DATO.BANDERA; 
break;
case 83:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA, $$[$0-2], $$[$0]); 
break;
case 84:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.INCREMENTO, $$[$0-1]); 
break;
case 85:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA, $$[$0-2], $$[$0]); 
break;
case 86:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.DECREMENTO, $$[$0-1]); 
break;
case 87:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 88:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION, $$[$0-2], $$[$0]); 
break;
case 89:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 90:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULO, $$[$0-2], $$[$0]); 
break;
case 91:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO, $$[$0]); 
break;
case 92:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR, $$[$0-2], $$[$0]); 
break;
case 93:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR, $$[$0-2], $$[$0]); 
break;
case 94:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 95:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 96:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL, $$[$0-2], $$[$0]); 
break;
case 97:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL, $$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.OR, $$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.AND, $$[$0-2], $$[$0]); 
break;
case 100:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOT, $$[$0]); 
break;
case 101:
 this.$ = $$[$0-1] 
break;
case 102:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO, Number($$[$0])); 
break;
case 103:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL, Number($$[$0])); 
break;
case 104:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER, $$[$0]); 
break;
case 105:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA, $$[$0]); 
break;
case 106:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, true); 
break;
case 107:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, false); 
break;
case 108:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR, $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,18:$V0,19:$V1,24:$V2,29:9,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{1:[3]},{5:[1,16],6:17,7:18,8:19,9:20,18:$V0,19:$V1,24:$V2,29:9,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{19:[1,21]},{19:[1,22]},{19:[1,23]},{33:$V9,34:$Va,35:$Vb},o($Vc,[2,78]),o($Vc,[2,79]),o($Vc,[2,80]),o($Vc,[2,81]),o($Vc,[2,82]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{20:[1,27]},{20:[1,28]},{22:[1,30],33:[1,29]},{19:$Vd,20:$Ve,30:31,31:32,32:33,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{22:[1,44]},{22:[1,45]},{19:$Vd,20:$Ve,21:[1,46],23:47,30:48,31:49,32:50,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{21:[1,51],27:52,29:53,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{19:$Vd,20:$Ve,30:54,31:55,32:56,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vn,[2,43]),{22:[1,57],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{22:[1,75]},{22:[1,76]},{19:$Vd,20:$VF,30:77,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:79,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,29:81,30:80,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VG,[2,102]),o($VG,[2,103]),o($VG,[2,104]),o($VG,[2,105]),o($VG,[2,106]),o($VG,[2,107]),o($VG,[2,108]),o($Vn,[2,49]),o($Vn,[2,50]),{22:[1,82]},{21:[1,83],28:$VH},o($VI,[2,39],{34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE}),o($VI,[2,40]),o($VI,[2,41]),{25:[1,85]},{21:[1,86],28:[1,87]},{19:[1,88]},{22:[1,89],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{22:[1,90]},{22:[1,91]},o($Vn,[2,46]),{19:$Vd,20:$VF,30:92,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VG,[2,84]),{19:$Vd,20:$VF,30:93,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VG,[2,86]),{19:$Vd,20:$VF,30:94,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:95,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:96,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:97,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:98,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:99,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:100,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:101,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:102,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:103,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:104,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$VF,30:105,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$Ve,30:106,31:107,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($Vn,[2,47]),o($Vn,[2,48]),o($VG,[2,91]),{19:$Vd,20:$VF,30:80,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VG,[2,100]),{21:[1,108],34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{21:[1,109]},o($V8,[2,28]),{22:[1,110]},{19:$Vd,20:$Ve,30:111,31:112,32:113,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{8:116,9:117,10:114,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{25:[1,131]},{29:132,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VI,[2,33]),o($Vn,[2,42]),o($Vn,[2,44]),o($Vn,[2,45]),o($VQ,[2,83],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VQ,[2,85],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VR,[2,87],{56:$Vv}),o($VR,[2,88],{56:$Vv}),o($VG,[2,89]),o($VR,[2,90],{56:$Vv}),o($VS,[2,92],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VS,[2,93],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VS,[2,94],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VS,[2,95],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VS,[2,96],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VS,[2,97],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o([21,22,28,45,46,64],[2,98],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,65:$VE}),o([21,22,28,45,46,64,65],[2,99],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),{34:$Vo,35:$Vp,46:[1,133],52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{46:[1,134]},o($VG,[2,101]),{19:$Vd,20:$VF,30:135,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($V8,[2,29]),o($VI,[2,36],{34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE}),o($VI,[2,37]),o($VI,[2,38]),{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,136],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,19]),o($VT,[2,20]),o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,23]),o($VT,[2,24]),o($VT,[2,25]),o($VT,[2,26]),o($VT,[2,27]),{20:[1,146]},{20:[1,147],33:$V9,34:$Va,35:$Vb},{20:[1,148]},{20:[1,149]},{25:[1,150]},{22:[1,151]},{22:[1,152]},{8:116,9:117,10:153,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{19:[1,154]},{19:$Vd,20:$Ve,30:155,31:156,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$Ve,30:158,31:157,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o([21,22,28,46],[2,73],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE}),o($V8,[2,30]),o($VT,[2,10]),o($VT,[2,11]),o($VT,[2,12]),o($VT,[2,13]),o($VT,[2,14]),o($VT,[2,15]),o($VT,[2,16]),o($VT,[2,17]),o($VT,[2,18]),{19:$Vd,20:$Ve,21:[1,160],30:159,31:161,32:162,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$Ve,21:[1,164],23:163,30:48,31:49,32:50,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$Ve,30:165,31:166,32:167,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{19:$Vd,20:$Ve,30:168,31:169,32:170,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},{8:116,9:117,10:171,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,71]),o($VT,[2,72]),{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,172],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VI,[2,32]),o($VU,[2,74],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE}),o($VU,[2,76]),o($VU,[2,75]),o($VU,[2,77],{34:$Vo,35:$Vp,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE}),{21:[1,173],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{22:[1,174]},{21:[1,175]},{21:[1,176]},{21:[1,177],28:$VH},{22:[1,178]},{21:[1,179],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{21:[1,180]},{21:[1,181]},{21:[1,182],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{21:[1,183]},{21:[1,184]},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,185],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($V8,[2,31]),{22:[1,186]},o($VT,[2,52]),{22:[1,187]},{22:[1,188]},{22:[1,189]},o($VT,[2,35]),{25:[1,190]},{25:[1,191]},{25:[1,192]},{25:[1,193]},{25:[1,194]},{25:[1,195]},{37:[1,196]},o($VT,[2,51]),o($VT,[2,53]),o($VT,[2,54]),o($VT,[2,34]),{8:116,9:117,10:197,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:116,9:117,10:198,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:116,9:117,10:199,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:116,9:117,10:200,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:116,9:117,10:201,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:116,9:117,10:202,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{20:[1,203]},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,204],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,205],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,206],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,207],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,208],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,209],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{19:$Vd,20:$Ve,30:210,31:211,32:212,53:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm},o($VT,[2,63],{42:[1,213]}),o($VT,[2,66],{42:[1,214]}),o($VT,[2,69],{42:[1,215]}),o($VT,[2,55]),o($VT,[2,56]),o($VT,[2,57]),{21:[1,216],34:$Vo,35:$Vp,45:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE},{21:[1,217]},{21:[1,218]},{13:220,25:[1,219],41:$VN},{13:222,25:[1,221],41:$VN},{13:224,25:[1,223],41:$VN},{22:[1,225]},{22:[1,226]},{22:[1,227]},{8:116,9:117,10:228,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,64]),{8:116,9:117,10:229,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,67]),{8:116,9:117,10:230,11:118,12:115,13:119,14:120,15:121,16:122,17:123,19:$VJ,29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,70]),o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,231],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,232],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},{8:137,9:138,11:139,12:140,13:141,14:142,15:143,16:144,17:145,19:$VJ,26:[1,233],29:9,36:$VK,37:$VL,38:$VM,41:$VN,43:$VO,44:$VP,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VT,[2,62]),o($VT,[2,65]),o($VT,[2,68])],
defaultActions: {16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('../arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../arbol/instrucciones').TIPO_VALOR;
    const INSTRUCCIONES = require('../arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../arbol/tablasimbolos').TIPO_DATO;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Se ignoran espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 47;
break;
case 4:return 49;
break;
case 5:return 48;
break;
case 6:return 50;
break;
case 7:return 51;
break;
case 8:return 71;
break;
case 9:return 72;
break;
case 10:return "vacio";
break;
case 11:return 22;
break;
case 12:return 28;
break;
case 13:return 25;
break;
case 14:return 26;
break;
case 15:return 20;
break;
case 16:return 21;
break;
case 17:return 45;
break;
case 18:return 46;
break;
case 19:return 34;
break;
case 20:return 35;
break;
case 21:return 53;
break;
case 22:return 52;
break;
case 23:return 54;
break;
case 24:return 55;
break;
case 25:return 56;
break;
case 26:return 57;
break;
case 27:return 60;
break;
case 28:return 61;
break;
case 29:return 62;
break;
case 30:return 63;
break;
case 31:return 58;
break;
case 32:return 59;
break;
case 33:return 33;
break;
case 34:return 64;
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 41;
break;
case 38:return 42;
break;
case 39:return 'switch';
break;
case 40:return 'case';
break;
case 41:return 'default';
break;
case 42:return 37;
break;
case 43:return 38;
break;
case 44:return 40;
break;
case 45:return 43;
break;
case 46:return 44;
break;
case 47:return 'return';
break;
case 48:return 36;
break;
case 49:return 'tolower';
break;
case 50:return 'toupper';
break;
case 51:return 'lenght';
break;
case 52:return 'truncate';
break;
case 53:return 'round';
break;
case 54:return 'typeof';
break;
case 55:return 'tostring';
break;
case 56:return 'tochararray';
break;
case 57:return 18;
break;
case 58:return 68;
break;
case 59:return 67;
break;
case 60:return 19;
break;
case 61: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69; 
break;
case 63:return 5;
break;
case 64:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:lenght\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}