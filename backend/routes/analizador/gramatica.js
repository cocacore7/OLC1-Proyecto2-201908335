/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,8],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,21,22,27,54,55,56,57,58],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[22,24],$Vd=[1,34],$Ve=[1,37],$Vf=[1,35],$Vg=[1,36],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[5,21,22,23,27,29,39,40,42,44,46,47,48,49,50,51,52,54,55,56,57,58,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$Vw=[1,80],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[24,25,31,45,53,59,60,61,62,63,64,65,66,67,68,69,70,71,72],$VM=[1,86],$VN=[1,100],$VO=[24,31],$VP=[1,152],$VQ=[1,151],$VR=[1,153],$VS=[1,154],$VT=[1,155],$VU=[1,156],$VV=[1,157],$VW=[1,158],$VX=[1,159],$VY=[1,160],$VZ=[24,25,31,45,53,59,60,65,66,67,68,69,70,71,72],$V_=[24,25,31,45,53,59,60,61,62,64,65,66,67,68,69,70,71,72],$V$=[24,25,31,45,53,65,66,67,68,69,70,71,72],$V01=[22,29,39,40,42,44,46,47,48,49,50,51,52,54,55,56,57,58],$V11=[24,25,31,45],$V21=[1,260],$V31=[1,261];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"MAIN":6,"METODO":7,"DECLARACION":8,"ASIGNACION":9,"CUERPO2":10,"LLAMADA":11,"IMPRIMIR":12,"SI":13,"SWITCHH":14,"WHILEE":15,"DOWHILEE":16,"FOR":17,"BREAKK":18,"CONTINUEE":19,"RETURNN":20,"exec":21,"identificador":22,"parentesisa":23,"parentesisc":24,"pcoma":25,"VALORESLLAMADA":26,"vacio":27,"llavea":28,"llavec":29,"PARAMETROS":30,"coma":31,"TIPO":32,"EXP":33,"CASTEO":34,"TERNARIO":35,"igual":36,"incremento":37,"decremento":38,"imprimir":39,"si":40,"sino":41,"switch":42,"CASES":43,"case":44,"dospuntos":45,"default":46,"mientras":47,"do":48,"for":49,"breakk":50,"continuee":51,"returnn":52,"signointerrogacion":53,"entero":54,"decimal":55,"caracter":56,"cadena":57,"bandera":58,"mas":59,"menos":60,"por":61,"dividido":62,"potencia":63,"modulo":64,"menor":65,"mayor":66,"menorigual":67,"mayorigual":68,"igualigual":69,"noigual":70,"or":71,"and":72,"not":73,"tolower":74,"toupper":75,"lenght":76,"truncate":77,"round":78,"typeof":79,"tostring":80,"tochararray":81,"enteroo":82,"decimall":83,"caracterr":84,"cadenaa":85,"truee":86,"falsee":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"exec",22:"identificador",23:"parentesisa",24:"parentesisc",25:"pcoma",27:"vacio",28:"llavea",29:"llavec",31:"coma",36:"igual",37:"incremento",38:"decremento",39:"imprimir",40:"si",41:"sino",42:"switch",44:"case",45:"dospuntos",46:"default",47:"mientras",48:"do",49:"for",50:"breakk",51:"continuee",52:"returnn",53:"signointerrogacion",54:"entero",55:"decimal",56:"caracter",57:"cadena",58:"bandera",59:"mas",60:"menos",61:"por",62:"dividido",63:"potencia",64:"modulo",65:"menor",66:"mayor",67:"menorigual",68:"mayorigual",69:"igualigual",70:"noigual",71:"or",72:"and",73:"not",74:"tolower",75:"toupper",76:"lenght",77:"truncate",78:"round",79:"typeof",80:"tostring",81:"tochararray",82:"enteroo",83:"decimall",84:"caracterr",85:"cadenaa",86:"truee",87:"falsee"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[6,5],[6,6],[7,7],[7,8],[30,4],[30,2],[11,5],[11,4],[26,3],[26,3],[26,3],[26,1],[26,1],[26,1],[8,5],[8,3],[8,5],[8,5],[9,4],[9,4],[9,4],[9,3],[9,3],[12,5],[12,4],[12,5],[12,5],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[14,7],[14,7],[14,7],[43,5],[43,4],[43,5],[43,4],[43,5],[43,4],[43,3],[15,7],[15,7],[15,7],[16,9],[16,9],[16,9],[17,10],[17,10],[18,2],[19,2],[20,2],[34,4],[35,5],[35,5],[35,5],[35,5],[32,1],[32,1],[32,1],[32,1],[32,1],[33,3],[33,3],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,4],[33,4],[33,4],[33,4],[33,4],[33,4],[33,4],[33,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log('Funciono'); return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 6: case 7: case 9:
 this.$=[$$[$0]]; 
break;
case 8: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33:
 this.$ = [$$[$0]]; 
break;
case 34:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 35:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 36:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-5], [], $$[$0-1]) 
break;
case 37:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 38:
 $$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3];
break;
case 39:
 this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1], $$[$0])]; 
break;
case 40:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 41:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 42: case 43: case 44:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 45: case 46: case 47:
this.$=[$$[$0]];
break;
case 48: case 50: case 51:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 49:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-2], $$[$0-1], undefined); 
break;
case 52: case 53: case 54:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-3], $$[$0-1]); 
break;
case 55:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.INCREMENTO); 
break;
case 56:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.DECREMENTO); 
break;
case 57: case 59: case 60:
 this.$=INSTRUCCIONES.nuevoImprimir($$[$0-2]); 
break;
case 58:
 this.$=INSTRUCCIONES.nuevoImprimir("\n"); 
break;
case 61: case 64: case 67:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 62: case 65: case 68:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-4], $$[$0-1], undefined); 
break;
case 63: case 66: case 69:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-6], $$[$0-3], [$$[$0]]); 
break;
case 70: case 71: case 72:
 this.$=INSTRUCCIONES.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 73: case 75: case 77:
 this.$=INSTRUCCIONES.nuevoCase($$[$0-3], $$[$0-1], [$$[$0]]); 
break;
case 74: case 76: case 78:
 this.$=INSTRUCCIONES.nuevoCase($$[$0-2], $$[$0], undefined); 
break;
case 79:
 this.$=INSTRUCCIONES.nuevoCase("defaultSwitch", $$[$0], undefined); 
break;
case 80: case 81: case 82:
 this.$=INSTRUCCIONES.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 83: case 84: case 85:
 this.$=INSTRUCCIONES.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 86: case 87:
 this.$=INSTRUCCIONES.nuevoFor($$[$0-7], $$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 88:
 this.$ = INSTRUCCIONES.nuevoBreak(); 
break;
case 89:
 this.$ = INSTRUCCIONES.nuevoContinue(); 
break;
case 90:
 this.$ = INSTRUCCIONES.nuevoReturn(); 
break;
case 91:
 this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.CASTEO, INSTRUCCIONES.nuevoValor($$[$0-2],0), $$[$0]); 
break;
case 92: case 93: case 94: case 95:
 this.$ = INSTRUCCIONES.nuevoTernario(TIPO_OPERACION.TERNARIO, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 96:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 97:
 this.$ = TIPO_DATO.DECIMAL; 
break;
case 98:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 99:
 this.$ = TIPO_DATO.CADENA; 
break;
case 100:
 this.$ = TIPO_DATO.BANDERA; 
break;
case 101:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA, $$[$0-2], $$[$0]); 
break;
case 102:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA, $$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-1], TIPO_VALOR.INCREMENTO); 
break;
case 104:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-1], TIPO_VALOR.DECREMENTO); 
break;
case 105:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 106:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION, $$[$0-2], $$[$0]); 
break;
case 107:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULO, $$[$0-2], $$[$0]); 
break;
case 109:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO, $$[$0]); 
break;
case 110:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR, $$[$0-2], $$[$0]); 
break;
case 111:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR, $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 113:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 114:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL, $$[$0-2], $$[$0]); 
break;
case 115:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL, $$[$0-2], $$[$0]); 
break;
case 116:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.OR, $$[$0-2], $$[$0]); 
break;
case 117:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.AND, $$[$0-2], $$[$0]); 
break;
case 118:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOT, $$[$0]); 
break;
case 119:
 this.$ = $$[$0-1] 
break;
case 120:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.LOWER, $$[$0-1]); 
break;
case 121:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.UPPER, $$[$0-1]); 
break;
case 122:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.LENGTH, $$[$0-1]); 
break;
case 123:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TRUNCATE, $$[$0-1]); 
break;
case 124:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.ROUND, $$[$0-1]); 
break;
case 125:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TYPEOF, $$[$0-1]); 
break;
case 126:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TOSTRING, $$[$0-1]); 
break;
case 127:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.TOCHARARRAY, $$[$0-1]); 
break;
case 128:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO, Number($$[$0])); 
break;
case 129:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL, Number($$[$0])); 
break;
case 130:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER, $$[$0]); 
break;
case 131:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA, $$[$0]); 
break;
case 132:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, true); 
break;
case 133:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, false); 
break;
case 134:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR, $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,21:$V0,22:$V1,27:$V2,32:9,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{1:[3]},{5:[1,16],6:17,7:18,8:19,9:20,21:$V0,22:$V1,27:$V2,32:9,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{22:[1,21]},{22:[1,22]},{22:[1,23]},{36:$V9,37:$Va,38:$Vb},o($Vc,[2,96]),o($Vc,[2,97]),o($Vc,[2,98]),o($Vc,[2,99]),o($Vc,[2,100]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{23:[1,27]},{23:[1,28]},{25:[1,30],36:[1,29]},{22:$Vd,23:$Ve,33:31,34:32,35:33,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{25:[1,52]},{25:[1,53]},{22:$Vd,23:$Ve,24:[1,54],26:55,33:56,34:57,35:58,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{24:[1,59],30:60,32:61,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{22:$Vd,23:$Ve,33:62,34:63,35:64,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($Vv,[2,49]),{25:[1,65],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{25:[1,81]},{25:[1,82]},o($VL,[2,134],{37:[1,83],38:[1,84]}),{22:$Vd,23:$VM,33:85,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:87,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,32:89,33:88,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{23:[1,90]},{23:[1,91]},{23:[1,92]},{23:[1,93]},{23:[1,94]},{23:[1,95]},{23:[1,96]},{23:[1,97]},o($VL,[2,128]),o($VL,[2,129]),o($VL,[2,130]),o($VL,[2,131]),o($VL,[2,132]),o($VL,[2,133]),o($Vv,[2,55]),o($Vv,[2,56]),{25:[1,98]},{24:[1,99],31:$VN},o($VO,[2,45],{53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VO,[2,46]),o($VO,[2,47]),{28:[1,101]},{24:[1,102],31:[1,103]},{22:[1,104]},{25:[1,105],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{25:[1,106]},{25:[1,107]},o($Vv,[2,52]),{22:$Vd,23:$VM,33:108,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:109,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:110,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:111,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:112,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:113,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:114,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:115,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:116,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:117,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:118,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:119,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:120,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:121,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,33:122,34:123,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($Vv,[2,53]),o($Vv,[2,54]),o($VL,[2,103]),o($VL,[2,104]),o($VL,[2,109]),{22:$Vd,23:$VM,33:88,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($VL,[2,118]),{24:[1,124],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,125]},{22:$Vd,23:$VM,33:126,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:127,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:128,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:129,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:130,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:131,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:132,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:133,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V8,[2,34]),{25:[1,134]},{22:$Vd,23:$Ve,33:135,34:136,35:137,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{8:140,9:141,10:138,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{28:[1,161]},{32:162,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($VO,[2,39]),o($Vv,[2,48]),o($Vv,[2,50]),o($Vv,[2,51]),o($VZ,[2,101],{61:$Vz,62:$VA,63:$VB,64:$VC}),o($VZ,[2,102],{61:$Vz,62:$VA,63:$VB,64:$VC}),o($V_,[2,105],{63:$VB}),o($V_,[2,106],{63:$VB}),o($VL,[2,107]),o($V_,[2,108],{63:$VB}),o($V$,[2,110],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V$,[2,111],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V$,[2,112],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V$,[2,113],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V$,[2,114],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V$,[2,115],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o([24,25,31,45,53,71],[2,116],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,72:$VK}),o([24,25,31,45,53,71,72],[2,117],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),{45:[1,163],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{45:[1,164]},o($VL,[2,119]),{22:$Vd,23:$VM,33:165,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{24:[1,166],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,167],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,168],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,169],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,170],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,171],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,172],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,173],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($V8,[2,35]),o($VO,[2,42],{53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VO,[2,43]),o($VO,[2,44]),{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,174],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,22]),o($V01,[2,23]),o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),o($V01,[2,29]),o($V01,[2,30]),o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),{23:[1,187]},{23:[1,188],36:$V9,37:$Va,38:$Vb},{23:[1,189]},{23:[1,190]},{23:[1,191]},{28:[1,192]},{23:[1,193]},{25:[1,194]},{25:[1,195]},{25:[1,196]},{8:140,9:141,10:197,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{22:[1,198]},{22:$Vd,23:$Ve,33:199,34:200,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,33:202,34:201,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V11,[2,91],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VL,[2,120]),o($VL,[2,121]),o($VL,[2,122]),o($VL,[2,123]),o($VL,[2,124]),o($VL,[2,125]),o($VL,[2,126]),o($VL,[2,127]),o($V8,[2,36]),o($V01,[2,10]),o($V01,[2,11]),o($V01,[2,12]),o($V01,[2,13]),o($V01,[2,14]),o($V01,[2,15]),o($V01,[2,16]),o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),o($V01,[2,21]),{22:$Vd,23:$Ve,24:[1,204],33:203,34:205,35:206,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,24:[1,208],26:207,33:56,34:57,35:58,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,33:209,34:210,35:211,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,33:212,34:213,35:214,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$Ve,33:215,34:216,35:217,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{8:140,9:141,10:218,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:219,9:220,22:$V1,32:9,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,88]),o($V01,[2,89]),o($V01,[2,90]),{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,221],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($VO,[2,38]),o($V11,[2,92],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V11,[2,94]),o($V11,[2,93]),o($V11,[2,95],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),{24:[1,222],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{25:[1,223]},{24:[1,224]},{24:[1,225]},{24:[1,226],31:$VN},{25:[1,227]},{24:[1,228],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,229]},{24:[1,230]},{24:[1,231],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,232]},{24:[1,233]},{24:[1,234],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,235]},{24:[1,236]},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,237],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{22:$Vd,23:$VM,33:238,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:239,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V8,[2,37]),{25:[1,240]},o($V01,[2,58]),{25:[1,241]},{25:[1,242]},{25:[1,243]},o($V01,[2,41]),{28:[1,244]},{28:[1,245]},{28:[1,246]},{28:[1,247]},{28:[1,248]},{28:[1,249]},{28:[1,250]},{28:[1,251]},{28:[1,252]},{47:[1,253]},{25:[1,254],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{25:[1,255],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($V01,[2,57]),o($V01,[2,59]),o($V01,[2,60]),o($V01,[2,40]),{8:140,9:141,10:256,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:257,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:258,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{43:259,44:$V21,46:$V31},{43:262,44:$V21,46:$V31},{43:263,44:$V21,46:$V31},{8:140,9:141,10:264,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:265,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:266,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{23:[1,267]},{22:$Vd,23:$VM,33:268,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:$Vd,23:$VM,33:269,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,270],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,271],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,272],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{29:[1,273]},{22:$Vd,23:$Ve,33:274,34:275,35:276,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{45:[1,277]},{29:[1,278]},{29:[1,279]},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,280],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,281],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,282],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{22:$Vd,23:$Ve,33:283,34:284,35:285,60:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{24:[1,286],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,287],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($V01,[2,62],{41:[1,288]}),o($V01,[2,65],{41:[1,289]}),o($V01,[2,68],{41:[1,290]}),o($V01,[2,70]),{45:[1,291],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{45:[1,292]},{45:[1,293]},{8:140,9:141,10:294,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,71]),o($V01,[2,72]),o($V01,[2,80]),o($V01,[2,81]),o($V01,[2,82]),{24:[1,295],53:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{24:[1,296]},{24:[1,297]},{28:[1,298]},{28:[1,299]},{13:301,28:[1,300],40:$VR},{13:303,28:[1,302],40:$VR},{13:305,28:[1,304],40:$VR},{8:140,9:141,10:306,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:307,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:308,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[2,79],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{25:[1,309]},{25:[1,310]},{25:[1,311]},{8:140,9:141,10:312,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:313,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:140,9:141,10:314,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,63]),{8:140,9:141,10:315,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,66]),{8:140,9:141,10:316,11:142,12:139,13:143,14:144,15:145,16:146,17:147,18:148,19:149,20:150,22:$VP,32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,69]),{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[2,74],32:9,39:$VQ,40:$VR,42:$VS,43:317,44:$V21,46:$V31,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[2,76],32:9,39:$VQ,40:$VR,42:$VS,43:318,44:$V21,46:$V31,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[2,78],32:9,39:$VQ,40:$VR,42:$VS,43:319,44:$V21,46:$V31,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,320],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,321],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,322],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,323],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{8:175,9:176,11:177,12:178,13:179,14:180,15:181,16:182,17:183,18:184,19:185,20:186,22:$VP,29:[1,324],32:9,39:$VQ,40:$VR,42:$VS,47:$VT,48:$VU,49:$VV,50:$VW,51:$VX,52:$VY,54:$V3,55:$V4,56:$V5,57:$V6,58:$V7},{29:[2,73]},{29:[2,75]},{29:[2,77]},o($V01,[2,86]),o($V01,[2,87]),o($V01,[2,61]),o($V01,[2,64]),o($V01,[2,67])],
defaultActions: {16:[2,1],317:[2,73],318:[2,75],319:[2,77]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('../arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../arbol/instrucciones').TIPO_VALOR;
    const INSTRUCCIONES = require('../arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../arbol/tablasimbolos').TIPO_DATO;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Se ignoran espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 54;
break;
case 4:return 56;
break;
case 5:return 55;
break;
case 6:return 57;
break;
case 7:return 58;
break;
case 8:return 86;
break;
case 9:return 87;
break;
case 10:return "vacio";
break;
case 11:return 25;
break;
case 12:return 31;
break;
case 13:return 28;
break;
case 14:return 29;
break;
case 15:return 23;
break;
case 16:return 24;
break;
case 17:return 53;
break;
case 18:return 45;
break;
case 19:return 37;
break;
case 20:return 38;
break;
case 21:return 60;
break;
case 22:return 59;
break;
case 23:return 61;
break;
case 24:return 62;
break;
case 25:return 63;
break;
case 26:return 64;
break;
case 27:return 67;
break;
case 28:return 68;
break;
case 29:return 69;
break;
case 30:return 70;
break;
case 31:return 65;
break;
case 32:return 66;
break;
case 33:return 36;
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return 73;
break;
case 37:return 40;
break;
case 38:return 41;
break;
case 39:return 42;
break;
case 40:return 44;
break;
case 41:return 46;
break;
case 42:return 47;
break;
case 43:return 48;
break;
case 44:return 49;
break;
case 45:return 50;
break;
case 46:return 51;
break;
case 47:return 52;
break;
case 48:return 39;
break;
case 49:return 74;
break;
case 50:return 75;
break;
case 51:return 76;
break;
case 52:return 77;
break;
case 53:return 78;
break;
case 54:return 79;
break;
case 55:return 80;
break;
case 56:return 81;
break;
case 57:return 21;
break;
case 58:return 83;
break;
case 59:return 82;
break;
case 60:return 22;
break;
case 61: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 85; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 84; 
break;
case 63:return 5;
break;
case 64:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"([^\"]|\\n|\\r|\\t)*")/i,/^(?:'([^\']|\\n|\\r|\\t)?')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}