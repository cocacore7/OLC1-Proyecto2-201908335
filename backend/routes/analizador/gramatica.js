/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,8],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,20,21,26,52,53,54,55,56],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[21,23],$Vd=[1,34],$Ve=[1,37],$Vf=[1,35],$Vg=[1,36],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[5,20,21,22,26,28,38,39,41,43,45,46,47,48,49,50,52,53,54,55,56,58,71,72,73,74,75,76,77],$Vo=[1,72],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[23,24,30,44,51,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VE=[1,78],$VF=[1,84],$VG=[23,30],$VH=[1,127],$VI=[1,126],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[1,131],$VN=[1,132],$VO=[1,133],$VP=[1,134],$VQ=[23,24,30,44,51,57,58,63,64,65,66,67,68,69,70],$VR=[23,24,30,44,51,57,58,59,60,62,63,64,65,66,67,68,69,70],$VS=[23,24,30,44,51,63,64,65,66,67,68,69,70],$VT=[21,28,38,39,41,43,45,46,47,48,49,50,52,53,54,55,56],$VU=[23,24,30,44],$VV=[1,224],$VW=[1,225];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"MAIN":6,"METODO":7,"DECLARACION":8,"ASIGNACION":9,"CUERPO2":10,"LLAMADA":11,"IMPRIMIR":12,"SI":13,"SWITCHH":14,"WHILEE":15,"DOWHILEE":16,"FOR":17,"BREAKK":18,"CONTINUEE":19,"exec":20,"identificador":21,"parentesisa":22,"parentesisc":23,"pcoma":24,"VALORESLLAMADA":25,"vacio":26,"llavea":27,"llavec":28,"PARAMETROS":29,"coma":30,"TIPO":31,"EXP":32,"CASTEO":33,"TERNARIO":34,"igual":35,"incremento":36,"decremento":37,"imprimir":38,"si":39,"sino":40,"switch":41,"CASES":42,"case":43,"dospuntos":44,"default":45,"mientras":46,"do":47,"for":48,"breakk":49,"continuee":50,"signointerrogacion":51,"entero":52,"decimal":53,"caracter":54,"cadena":55,"bandera":56,"mas":57,"menos":58,"por":59,"dividido":60,"potencia":61,"modulo":62,"menor":63,"mayor":64,"menorigual":65,"mayorigual":66,"igualigual":67,"noigual":68,"or":69,"and":70,"not":71,"enteroo":72,"decimall":73,"caracterr":74,"cadenaa":75,"truee":76,"falsee":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"exec",21:"identificador",22:"parentesisa",23:"parentesisc",24:"pcoma",26:"vacio",27:"llavea",28:"llavec",30:"coma",35:"igual",36:"incremento",37:"decremento",38:"imprimir",39:"si",40:"sino",41:"switch",43:"case",44:"dospuntos",45:"default",46:"mientras",47:"do",48:"for",49:"breakk",50:"continuee",51:"signointerrogacion",52:"entero",53:"decimal",54:"caracter",55:"cadena",56:"bandera",57:"mas",58:"menos",59:"por",60:"dividido",61:"potencia",62:"modulo",63:"menor",64:"mayor",65:"menorigual",66:"mayorigual",67:"igualigual",68:"noigual",69:"or",70:"and",71:"not",72:"enteroo",73:"decimall",74:"caracterr",75:"cadenaa",76:"truee",77:"falsee"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[6,5],[6,6],[7,7],[7,8],[29,4],[29,2],[11,5],[11,4],[25,3],[25,3],[25,3],[25,1],[25,1],[25,1],[8,5],[8,3],[8,5],[8,5],[9,4],[9,4],[9,4],[9,3],[9,3],[12,5],[12,4],[12,5],[12,5],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[13,11],[13,7],[13,9],[14,7],[14,7],[14,7],[42,5],[42,4],[42,5],[42,4],[42,5],[42,4],[42,3],[15,7],[15,7],[15,7],[16,9],[16,9],[16,9],[17,10],[17,10],[18,2],[19,2],[33,4],[34,5],[34,5],[34,5],[34,5],[31,1],[31,1],[31,1],[31,1],[31,1],[32,3],[32,3],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log('Funciono'); return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 6: case 7: case 9:
 this.$=[$$[$0]]; 
break;
case 8: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:
 this.$ = [$$[$0]]; 
break;
case 32:
this.$=INSTRUCCIONES.nuevoMain($$[$0-3], []);
break;
case 33:
this.$=INSTRUCCIONES.nuevoMain($$[$0-4], $$[$0-2]);
break;
case 34:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-5], [], $$[$0-1]) 
break;
case 35:
 this.$ = INSTRUCCIONES.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 36:
 $$[$0-3].push(INSTRUCCIONES.nuevoParametro($$[$0-1],$$[$0])); this.$=$$[$0-3];
break;
case 37:
 this.$=[INSTRUCCIONES.nuevoParametro($$[$0-1], $$[$0])]; 
break;
case 38:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 39:
this.$=INSTRUCCIONES.nuevaLlamada($$[$0-3], []);
break;
case 40: case 41: case 42:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 43: case 44: case 45:
this.$=[$$[$0]];
break;
case 46: case 48: case 49:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 47:
 this.$=INSTRUCCIONES.nuevaDeclaracion($$[$0-2], $$[$0-1], undefined); 
break;
case 50: case 51: case 52:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-3], $$[$0-1]); 
break;
case 53:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.INCREMENTO); 
break;
case 54:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-2], TIPO_VALOR.DECREMENTO); 
break;
case 55: case 57: case 58:
 this.$=INSTRUCCIONES.nuevoImprimir($$[$0-2]); 
break;
case 56:
 this.$=INSTRUCCIONES.nuevoImprimir("\n"); 
break;
case 59: case 62: case 65:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 60: case 63: case 66:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-4], $$[$0-1], undefined); 
break;
case 61: case 64: case 67:
 this.$=INSTRUCCIONES.nuevoIf($$[$0-6], $$[$0-3], [$$[$0]]); 
break;
case 68: case 69: case 70:
 this.$=INSTRUCCIONES.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 71: case 73: case 75:
 this.$=INSTRUCCIONES.nuevoCase($$[$0-3], $$[$0-1], [$$[$0]]); 
break;
case 72: case 74: case 76:
 this.$=INSTRUCCIONES.nuevoCase($$[$0-2], $$[$0], undefined); 
break;
case 77:
 this.$=INSTRUCCIONES.nuevoCase("defaultSwitch", $$[$0], undefined); 
break;
case 78: case 79: case 80:
 this.$=INSTRUCCIONES.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 81: case 82: case 83:
 this.$=INSTRUCCIONES.nuevoDoWhile($$[$0-6], $$[$0-2]); 
break;
case 84: case 85:
 this.$=INSTRUCCIONES.nuevoFor($$[$0-7], $$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 86:
 this.$ = INSTRUCCIONES.nuevoBreak(); 
break;
case 87:
 this.$ = INSTRUCCIONES.nuevoContinue(); 
break;
case 88:
 this.$=INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.CASTEO, INSTRUCCIONES.nuevoValor($$[$0-2],0), $$[$0]); 
break;
case 89: case 90: case 91: case 92:
 this.$ = INSTRUCCIONES.nuevoTernario(TIPO_OPERACION.TERNARIO, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 93:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 94:
 this.$ = TIPO_DATO.DECIMAL; 
break;
case 95:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 96:
 this.$ = TIPO_DATO.CADENA; 
break;
case 97:
 this.$ = TIPO_DATO.BANDERA; 
break;
case 98:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.SUMA, $$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.RESTA, $$[$0-2], $$[$0]); 
break;
case 100:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-1], TIPO_VALOR.INCREMENTO); 
break;
case 101:
 this.$ = INSTRUCCIONES.nuevaAsignacion($$[$0-1], TIPO_VALOR.DECREMENTO); 
break;
case 102:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MULTIPLICACION, $$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.DIVISION, $$[$0-2], $$[$0]); 
break;
case 104:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.POTENCIA, $$[$0-2], $$[$0]); 
break;
case 105:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MODULO, $$[$0-2], $$[$0]); 
break;
case 106:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NEGATIVO, $$[$0]); 
break;
case 107:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENOR, $$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYOR, $$[$0-2], $$[$0]); 
break;
case 109:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MENORIGUAL, $$[$0-2], $$[$0]); 
break;
case 110:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.MAYORIGUAL, $$[$0-2], $$[$0]); 
break;
case 111:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.IGUALIGUAL, $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.NOIGUAL, $$[$0-2], $$[$0]); 
break;
case 113:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.OR, $$[$0-2], $$[$0]); 
break;
case 114:
 this.$ = INSTRUCCIONES.nuevaOperacionBinaria(TIPO_OPERACION.AND, $$[$0-2], $$[$0]); 
break;
case 115:
 this.$ = INSTRUCCIONES.nuevaOperacionUnaria(TIPO_OPERACION.NOT, $$[$0]); 
break;
case 116:
 this.$ = $$[$0-1] 
break;
case 117:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.ENTERO, Number($$[$0])); 
break;
case 118:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.DECIMAL, Number($$[$0])); 
break;
case 119:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CARACTER, $$[$0]); 
break;
case 120:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.CADENA, $$[$0]); 
break;
case 121:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, true); 
break;
case 122:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.BANDERA, false); 
break;
case 123:
 this.$ = INSTRUCCIONES.nuevoValor(TIPO_VALOR.IDENTIFICADOR, $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,20:$V0,21:$V1,26:$V2,31:9,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{1:[3]},{5:[1,16],6:17,7:18,8:19,9:20,20:$V0,21:$V1,26:$V2,31:9,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{21:[1,21]},{21:[1,22]},{21:[1,23]},{35:$V9,36:$Va,37:$Vb},o($Vc,[2,93]),o($Vc,[2,94]),o($Vc,[2,95]),o($Vc,[2,96]),o($Vc,[2,97]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{22:[1,27]},{22:[1,28]},{24:[1,30],35:[1,29]},{21:$Vd,22:$Ve,32:31,33:32,34:33,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{24:[1,44]},{24:[1,45]},{21:$Vd,22:$Ve,23:[1,46],25:47,32:48,33:49,34:50,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{23:[1,51],29:52,31:53,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{21:$Vd,22:$Ve,32:54,33:55,34:56,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($Vn,[2,47]),{24:[1,57],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{24:[1,73]},{24:[1,74]},o($VD,[2,123],{36:[1,75],37:[1,76]}),{21:$Vd,22:$VE,32:77,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:79,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,31:81,32:80,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($VD,[2,117]),o($VD,[2,118]),o($VD,[2,119]),o($VD,[2,120]),o($VD,[2,121]),o($VD,[2,122]),o($Vn,[2,53]),o($Vn,[2,54]),{24:[1,82]},{23:[1,83],30:$VF},o($VG,[2,43],{51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o($VG,[2,44]),o($VG,[2,45]),{27:[1,85]},{23:[1,86],30:[1,87]},{21:[1,88]},{24:[1,89],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{24:[1,90]},{24:[1,91]},o($Vn,[2,50]),{21:$Vd,22:$VE,32:92,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:93,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:94,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:95,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:96,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:97,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:98,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:99,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:100,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:101,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:102,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:103,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:104,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:105,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,32:106,33:107,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($Vn,[2,51]),o($Vn,[2,52]),o($VD,[2,100]),o($VD,[2,101]),o($VD,[2,106]),{21:$Vd,22:$VE,32:80,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($VD,[2,115]),{23:[1,108],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,109]},o($V8,[2,32]),{24:[1,110]},{21:$Vd,22:$Ve,32:111,33:112,34:113,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{8:116,9:117,10:114,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{27:[1,135]},{31:136,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VG,[2,37]),o($Vn,[2,46]),o($Vn,[2,48]),o($Vn,[2,49]),o($VQ,[2,98],{59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VQ,[2,99],{59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VR,[2,102],{61:$Vt}),o($VR,[2,103],{61:$Vt}),o($VD,[2,104]),o($VR,[2,105],{61:$Vt}),o($VS,[2,107],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VS,[2,108],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VS,[2,109],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VS,[2,110],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VS,[2,111],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VS,[2,112],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o([23,24,30,44,51,69],[2,113],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,70:$VC}),o([23,24,30,44,51,69,70],[2,114],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),{44:[1,137],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{44:[1,138]},o($VD,[2,116]),{21:$Vd,22:$VE,32:139,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($V8,[2,33]),o($VG,[2,40],{51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o($VG,[2,41]),o($VG,[2,42]),{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,140],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,23]),o($VT,[2,24]),o($VT,[2,25]),o($VT,[2,26]),o($VT,[2,27]),o($VT,[2,28]),o($VT,[2,29]),o($VT,[2,30]),o($VT,[2,31]),{22:[1,152]},{22:[1,153],35:$V9,36:$Va,37:$Vb},{22:[1,154]},{22:[1,155]},{22:[1,156]},{27:[1,157]},{22:[1,158]},{24:[1,159]},{24:[1,160]},{8:116,9:117,10:161,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{21:[1,162]},{21:$Vd,22:$Ve,32:163,33:164,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,32:166,33:165,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($VU,[2,88],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o($V8,[2,34]),o($VT,[2,10]),o($VT,[2,11]),o($VT,[2,12]),o($VT,[2,13]),o($VT,[2,14]),o($VT,[2,15]),o($VT,[2,16]),o($VT,[2,17]),o($VT,[2,18]),o($VT,[2,19]),o($VT,[2,20]),{21:$Vd,22:$Ve,23:[1,168],32:167,33:169,34:170,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,23:[1,172],25:171,32:48,33:49,34:50,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,32:173,33:174,34:175,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,32:176,33:177,34:178,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$Ve,32:179,33:180,34:181,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{8:116,9:117,10:182,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:183,9:184,21:$V1,31:9,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,86]),o($VT,[2,87]),{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,185],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VG,[2,36]),o($VU,[2,89],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o($VU,[2,91]),o($VU,[2,90]),o($VU,[2,92],{57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),{23:[1,186],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{24:[1,187]},{23:[1,188]},{23:[1,189]},{23:[1,190],30:$VF},{24:[1,191]},{23:[1,192],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,193]},{23:[1,194]},{23:[1,195],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,196]},{23:[1,197]},{23:[1,198],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,199]},{23:[1,200]},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,201],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{21:$Vd,22:$VE,32:202,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:203,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},o($V8,[2,35]),{24:[1,204]},o($VT,[2,56]),{24:[1,205]},{24:[1,206]},{24:[1,207]},o($VT,[2,39]),{27:[1,208]},{27:[1,209]},{27:[1,210]},{27:[1,211]},{27:[1,212]},{27:[1,213]},{27:[1,214]},{27:[1,215]},{27:[1,216]},{46:[1,217]},{24:[1,218],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{24:[1,219],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},o($VT,[2,55]),o($VT,[2,57]),o($VT,[2,58]),o($VT,[2,38]),{8:116,9:117,10:220,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:221,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:222,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{42:223,43:$VV,45:$VW},{42:226,43:$VV,45:$VW},{42:227,43:$VV,45:$VW},{8:116,9:117,10:228,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:229,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:230,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{22:[1,231]},{21:$Vd,22:$VE,32:232,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{21:$Vd,22:$VE,32:233,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,234],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,235],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,236],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{28:[1,237]},{21:$Vd,22:$Ve,32:238,33:239,34:240,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{44:[1,241]},{28:[1,242]},{28:[1,243]},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,244],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,245],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,246],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{21:$Vd,22:$Ve,32:247,33:248,34:249,58:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm},{23:[1,250],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,251],57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},o($VT,[2,60],{40:[1,252]}),o($VT,[2,63],{40:[1,253]}),o($VT,[2,66],{40:[1,254]}),o($VT,[2,68]),{44:[1,255],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{44:[1,256]},{44:[1,257]},{8:116,9:117,10:258,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,69]),o($VT,[2,70]),o($VT,[2,78]),o($VT,[2,79]),o($VT,[2,80]),{23:[1,259],51:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC},{23:[1,260]},{23:[1,261]},{27:[1,262]},{27:[1,263]},{13:265,27:[1,264],39:$VJ},{13:267,27:[1,266],39:$VJ},{13:269,27:[1,268],39:$VJ},{8:116,9:117,10:270,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:271,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:272,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[2,77],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{24:[1,273]},{24:[1,274]},{24:[1,275]},{8:116,9:117,10:276,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:277,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:116,9:117,10:278,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,61]),{8:116,9:117,10:279,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,64]),{8:116,9:117,10:280,11:118,12:115,13:119,14:120,15:121,16:122,17:123,18:124,19:125,21:$VH,31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,67]),{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[2,72],31:9,38:$VI,39:$VJ,41:$VK,42:281,43:$VV,45:$VW,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[2,74],31:9,38:$VI,39:$VJ,41:$VK,42:282,43:$VV,45:$VW,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[2,76],31:9,38:$VI,39:$VJ,41:$VK,42:283,43:$VV,45:$VW,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($VT,[2,81]),o($VT,[2,82]),o($VT,[2,83]),{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,284],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,285],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,286],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,287],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{8:141,9:142,11:143,12:144,13:145,14:146,15:147,16:148,17:149,18:150,19:151,21:$VH,28:[1,288],31:9,38:$VI,39:$VJ,41:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{28:[2,71]},{28:[2,73]},{28:[2,75]},o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,59]),o($VT,[2,62]),o($VT,[2,65])],
defaultActions: {16:[2,1],281:[2,71],282:[2,73],283:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('../arbol/instrucciones').TIPO_OPERACION;
    const TIPO_VALOR = require('../arbol/instrucciones').TIPO_VALOR;
    const INSTRUCCIONES = require('../arbol/instrucciones').INSTRUCCIONES;
    const TIPO_DATO = require('../arbol/tablasimbolos').TIPO_DATO;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Se ignoran espacios
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 52;
break;
case 4:return 54;
break;
case 5:return 53;
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 76;
break;
case 9:return 77;
break;
case 10:return "vacio";
break;
case 11:return 24;
break;
case 12:return 30;
break;
case 13:return 27;
break;
case 14:return 28;
break;
case 15:return 22;
break;
case 16:return 23;
break;
case 17:return 51;
break;
case 18:return 44;
break;
case 19:return 36;
break;
case 20:return 37;
break;
case 21:return 58;
break;
case 22:return 57;
break;
case 23:return 59;
break;
case 24:return 60;
break;
case 25:return 61;
break;
case 26:return 62;
break;
case 27:return 65;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 68;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 35;
break;
case 34:return 69;
break;
case 35:return 70;
break;
case 36:return 71;
break;
case 37:return 39;
break;
case 38:return 40;
break;
case 39:return 41;
break;
case 40:return 43;
break;
case 41:return 45;
break;
case 42:return 46;
break;
case 43:return 47;
break;
case 44:return 48;
break;
case 45:return 49;
break;
case 46:return 50;
break;
case 47:return 'return';
break;
case 48:return 38;
break;
case 49:return 'tolower';
break;
case 50:return 'toupper';
break;
case 51:return 'lenght';
break;
case 52:return 'truncate';
break;
case 53:return 'round';
break;
case 54:return 'typeof';
break;
case 55:return 'tostring';
break;
case 56:return 'tochararray';
break;
case 57:return 20;
break;
case 58:return 73;
break;
case 59:return 72;
break;
case 60:return 21;
break;
case 61: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 75; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 74; 
break;
case 63:return 5;
break;
case 64:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:lenght\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}